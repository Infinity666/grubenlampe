// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grubenlampe.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	grubenlampe.proto

It has these top-level messages:
	GenericRequest
	GenericResponse
	AddUserRequest
	AddOrgRequest
	AddASNRequest
	AddTunnelRequest
	DeleteTunnelRequest
	AddIPv4AddressRequest
	AddIPv4AddressResponse
	ReleaseIPv4AddressRequest
	AddIPv6PrefixRequest
	AddIPv6PrefixReply
	ReleaseIPv6PrefixRequest
	GetBGPStatusRequest
	GetBGPStatusReply
	BGPStatus
	GetLogsRequest
	GetLogsReply
	Log
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GenericRequest struct {
}

func (m *GenericRequest) Reset()                    { *m = GenericRequest{} }
func (m *GenericRequest) String() string            { return proto.CompactTextString(m) }
func (*GenericRequest) ProtoMessage()               {}
func (*GenericRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GenericResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *GenericResponse) Reset()                    { *m = GenericResponse{} }
func (m *GenericResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()               {}
func (*GenericResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GenericResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GenericResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type AddUserRequest struct {
	Email      string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password   string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	RipeHandle string `protobuf:"bytes,3,opt,name=ripe_handle,json=ripeHandle" json:"ripe_handle,omitempty"`
}

func (m *AddUserRequest) Reset()                    { *m = AddUserRequest{} }
func (m *AddUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AddUserRequest) ProtoMessage()               {}
func (*AddUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *AddUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AddUserRequest) GetRipeHandle() string {
	if m != nil {
		return m.RipeHandle
	}
	return ""
}

type AddOrgRequest struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ShortName string `protobuf:"bytes,2,opt,name=short_name,json=shortName" json:"short_name,omitempty"`
	Asn       uint32 `protobuf:"varint,3,opt,name=asn" json:"asn,omitempty"`
}

func (m *AddOrgRequest) Reset()                    { *m = AddOrgRequest{} }
func (m *AddOrgRequest) String() string            { return proto.CompactTextString(m) }
func (*AddOrgRequest) ProtoMessage()               {}
func (*AddOrgRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddOrgRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddOrgRequest) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AddOrgRequest) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

type AddASNRequest struct {
	OrgShortName string `protobuf:"bytes,1,opt,name=org_short_name,json=orgShortName" json:"org_short_name,omitempty"`
	Asn          uint32 `protobuf:"varint,2,opt,name=asn" json:"asn,omitempty"`
}

func (m *AddASNRequest) Reset()                    { *m = AddASNRequest{} }
func (m *AddASNRequest) String() string            { return proto.CompactTextString(m) }
func (*AddASNRequest) ProtoMessage()               {}
func (*AddASNRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddASNRequest) GetOrgShortName() string {
	if m != nil {
		return m.OrgShortName
	}
	return ""
}

func (m *AddASNRequest) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

type AddTunnelRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Asn     uint32 `protobuf:"varint,2,opt,name=asn" json:"asn,omitempty"`
}

func (m *AddTunnelRequest) Reset()                    { *m = AddTunnelRequest{} }
func (m *AddTunnelRequest) String() string            { return proto.CompactTextString(m) }
func (*AddTunnelRequest) ProtoMessage()               {}
func (*AddTunnelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddTunnelRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddTunnelRequest) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

type DeleteTunnelRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *DeleteTunnelRequest) Reset()                    { *m = DeleteTunnelRequest{} }
func (m *DeleteTunnelRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteTunnelRequest) ProtoMessage()               {}
func (*DeleteTunnelRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeleteTunnelRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddIPv4AddressRequest struct {
	OrgShortName string `protobuf:"bytes,1,opt,name=org_short_name,json=orgShortName" json:"org_short_name,omitempty"`
}

func (m *AddIPv4AddressRequest) Reset()                    { *m = AddIPv4AddressRequest{} }
func (m *AddIPv4AddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AddIPv4AddressRequest) ProtoMessage()               {}
func (*AddIPv4AddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddIPv4AddressRequest) GetOrgShortName() string {
	if m != nil {
		return m.OrgShortName
	}
	return ""
}

type AddIPv4AddressResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
}

func (m *AddIPv4AddressResponse) Reset()                    { *m = AddIPv4AddressResponse{} }
func (m *AddIPv4AddressResponse) String() string            { return proto.CompactTextString(m) }
func (*AddIPv4AddressResponse) ProtoMessage()               {}
func (*AddIPv4AddressResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddIPv4AddressResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddIPv4AddressResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AddIPv4AddressResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ReleaseIPv4AddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *ReleaseIPv4AddressRequest) Reset()                    { *m = ReleaseIPv4AddressRequest{} }
func (m *ReleaseIPv4AddressRequest) String() string            { return proto.CompactTextString(m) }
func (*ReleaseIPv4AddressRequest) ProtoMessage()               {}
func (*ReleaseIPv4AddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReleaseIPv4AddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddIPv6PrefixRequest struct {
	OrgShortName string `protobuf:"bytes,1,opt,name=org_short_name,json=orgShortName" json:"org_short_name,omitempty"`
}

func (m *AddIPv6PrefixRequest) Reset()                    { *m = AddIPv6PrefixRequest{} }
func (m *AddIPv6PrefixRequest) String() string            { return proto.CompactTextString(m) }
func (*AddIPv6PrefixRequest) ProtoMessage()               {}
func (*AddIPv6PrefixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AddIPv6PrefixRequest) GetOrgShortName() string {
	if m != nil {
		return m.OrgShortName
	}
	return ""
}

type AddIPv6PrefixReply struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Prefix  string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
}

func (m *AddIPv6PrefixReply) Reset()                    { *m = AddIPv6PrefixReply{} }
func (m *AddIPv6PrefixReply) String() string            { return proto.CompactTextString(m) }
func (*AddIPv6PrefixReply) ProtoMessage()               {}
func (*AddIPv6PrefixReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AddIPv6PrefixReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddIPv6PrefixReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AddIPv6PrefixReply) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

type ReleaseIPv6PrefixRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *ReleaseIPv6PrefixRequest) Reset()                    { *m = ReleaseIPv6PrefixRequest{} }
func (m *ReleaseIPv6PrefixRequest) String() string            { return proto.CompactTextString(m) }
func (*ReleaseIPv6PrefixRequest) ProtoMessage()               {}
func (*ReleaseIPv6PrefixRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReleaseIPv6PrefixRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetBGPStatusRequest struct {
	Asn uint32 `protobuf:"varint,1,opt,name=asn" json:"asn,omitempty"`
}

func (m *GetBGPStatusRequest) Reset()                    { *m = GetBGPStatusRequest{} }
func (m *GetBGPStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBGPStatusRequest) ProtoMessage()               {}
func (*GetBGPStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetBGPStatusRequest) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

type GetBGPStatusReply struct {
	Success   bool         `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Mesage    string       `protobuf:"bytes,2,opt,name=mesage" json:"mesage,omitempty"`
	BgpStatus []*BGPStatus `protobuf:"bytes,3,rep,name=bgp_status,json=bgpStatus" json:"bgp_status,omitempty"`
}

func (m *GetBGPStatusReply) Reset()                    { *m = GetBGPStatusReply{} }
func (m *GetBGPStatusReply) String() string            { return proto.CompactTextString(m) }
func (*GetBGPStatusReply) ProtoMessage()               {}
func (*GetBGPStatusReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetBGPStatusReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetBGPStatusReply) GetMesage() string {
	if m != nil {
		return m.Mesage
	}
	return ""
}

func (m *GetBGPStatusReply) GetBgpStatus() []*BGPStatus {
	if m != nil {
		return m.BgpStatus
	}
	return nil
}

type BGPStatus struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Asn     uint32 `protobuf:"varint,2,opt,name=asn" json:"asn,omitempty"`
	State   uint32 `protobuf:"varint,3,opt,name=state" json:"state,omitempty"`
}

func (m *BGPStatus) Reset()                    { *m = BGPStatus{} }
func (m *BGPStatus) String() string            { return proto.CompactTextString(m) }
func (*BGPStatus) ProtoMessage()               {}
func (*BGPStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BGPStatus) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BGPStatus) GetAsn() uint32 {
	if m != nil {
		return m.Asn
	}
	return 0
}

func (m *BGPStatus) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

type GetLogsRequest struct {
	OrgShortName string `protobuf:"bytes,1,opt,name=org_short_name,json=orgShortName" json:"org_short_name,omitempty"`
}

func (m *GetLogsRequest) Reset()                    { *m = GetLogsRequest{} }
func (m *GetLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLogsRequest) ProtoMessage()               {}
func (*GetLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetLogsRequest) GetOrgShortName() string {
	if m != nil {
		return m.OrgShortName
	}
	return ""
}

type GetLogsReply struct {
	Logs []*Log `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
}

func (m *GetLogsReply) Reset()                    { *m = GetLogsReply{} }
func (m *GetLogsReply) String() string            { return proto.CompactTextString(m) }
func (*GetLogsReply) ProtoMessage()               {}
func (*GetLogsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetLogsReply) GetLogs() []*Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

type Log struct {
	User         string                     `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	OrgShortName string                     `protobuf:"bytes,2,opt,name=org_short_name,json=orgShortName" json:"org_short_name,omitempty"`
	Request      string                     `protobuf:"bytes,3,opt,name=request" json:"request,omitempty"`
	Response     string                     `protobuf:"bytes,4,opt,name=response" json:"response,omitempty"`
	Time         *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=time" json:"time,omitempty"`
}

func (m *Log) Reset()                    { *m = Log{} }
func (m *Log) String() string            { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()               {}
func (*Log) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Log) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Log) GetOrgShortName() string {
	if m != nil {
		return m.OrgShortName
	}
	return ""
}

func (m *Log) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *Log) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *Log) GetTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*GenericRequest)(nil), "api.GenericRequest")
	proto.RegisterType((*GenericResponse)(nil), "api.GenericResponse")
	proto.RegisterType((*AddUserRequest)(nil), "api.AddUserRequest")
	proto.RegisterType((*AddOrgRequest)(nil), "api.AddOrgRequest")
	proto.RegisterType((*AddASNRequest)(nil), "api.AddASNRequest")
	proto.RegisterType((*AddTunnelRequest)(nil), "api.AddTunnelRequest")
	proto.RegisterType((*DeleteTunnelRequest)(nil), "api.DeleteTunnelRequest")
	proto.RegisterType((*AddIPv4AddressRequest)(nil), "api.AddIPv4AddressRequest")
	proto.RegisterType((*AddIPv4AddressResponse)(nil), "api.AddIPv4AddressResponse")
	proto.RegisterType((*ReleaseIPv4AddressRequest)(nil), "api.ReleaseIPv4AddressRequest")
	proto.RegisterType((*AddIPv6PrefixRequest)(nil), "api.AddIPv6PrefixRequest")
	proto.RegisterType((*AddIPv6PrefixReply)(nil), "api.AddIPv6PrefixReply")
	proto.RegisterType((*ReleaseIPv6PrefixRequest)(nil), "api.ReleaseIPv6PrefixRequest")
	proto.RegisterType((*GetBGPStatusRequest)(nil), "api.GetBGPStatusRequest")
	proto.RegisterType((*GetBGPStatusReply)(nil), "api.GetBGPStatusReply")
	proto.RegisterType((*BGPStatus)(nil), "api.BGPStatus")
	proto.RegisterType((*GetLogsRequest)(nil), "api.GetLogsRequest")
	proto.RegisterType((*GetLogsReply)(nil), "api.GetLogsReply")
	proto.RegisterType((*Log)(nil), "api.Log")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Grubenlampe service

type GrubenlampeClient interface {
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddASN(ctx context.Context, in *AddASNRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddTunnel(ctx context.Context, in *AddTunnelRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddIPv4Address(ctx context.Context, in *AddIPv4AddressRequest, opts ...grpc.CallOption) (*AddIPv4AddressResponse, error)
	ReleaseIPv4Address(ctx context.Context, in *ReleaseIPv4AddressRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	AddIPv6Prefix(ctx context.Context, in *AddIPv6PrefixRequest, opts ...grpc.CallOption) (*AddIPv6PrefixReply, error)
	ReleaseIPv6Prefix(ctx context.Context, in *ReleaseIPv6PrefixRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	GetBGPStatus(ctx context.Context, in *GetBGPStatusRequest, opts ...grpc.CallOption) (*GetBGPStatusReply, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsReply, error)
}

type grubenlampeClient struct {
	cc *grpc.ClientConn
}

func NewGrubenlampeClient(cc *grpc.ClientConn) GrubenlampeClient {
	return &grubenlampeClient{cc}
}

func (c *grubenlampeClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) AddOrg(ctx context.Context, in *AddOrgRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/AddOrg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) AddASN(ctx context.Context, in *AddASNRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/AddASN", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) AddTunnel(ctx context.Context, in *AddTunnelRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/AddTunnel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) DeleteTunnel(ctx context.Context, in *DeleteTunnelRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/DeleteTunnel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) AddIPv4Address(ctx context.Context, in *AddIPv4AddressRequest, opts ...grpc.CallOption) (*AddIPv4AddressResponse, error) {
	out := new(AddIPv4AddressResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/AddIPv4Address", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) ReleaseIPv4Address(ctx context.Context, in *ReleaseIPv4AddressRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/ReleaseIPv4Address", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) AddIPv6Prefix(ctx context.Context, in *AddIPv6PrefixRequest, opts ...grpc.CallOption) (*AddIPv6PrefixReply, error) {
	out := new(AddIPv6PrefixReply)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/AddIPv6Prefix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) ReleaseIPv6Prefix(ctx context.Context, in *ReleaseIPv6PrefixRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/ReleaseIPv6Prefix", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) GetBGPStatus(ctx context.Context, in *GetBGPStatusRequest, opts ...grpc.CallOption) (*GetBGPStatusReply, error) {
	out := new(GetBGPStatusReply)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/GetBGPStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grubenlampeClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsReply, error) {
	out := new(GetLogsReply)
	err := grpc.Invoke(ctx, "/api.Grubenlampe/GetLogs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Grubenlampe service

type GrubenlampeServer interface {
	AddUser(context.Context, *AddUserRequest) (*GenericResponse, error)
	AddOrg(context.Context, *AddOrgRequest) (*GenericResponse, error)
	AddASN(context.Context, *AddASNRequest) (*GenericResponse, error)
	AddTunnel(context.Context, *AddTunnelRequest) (*GenericResponse, error)
	DeleteTunnel(context.Context, *DeleteTunnelRequest) (*GenericResponse, error)
	AddIPv4Address(context.Context, *AddIPv4AddressRequest) (*AddIPv4AddressResponse, error)
	ReleaseIPv4Address(context.Context, *ReleaseIPv4AddressRequest) (*GenericResponse, error)
	AddIPv6Prefix(context.Context, *AddIPv6PrefixRequest) (*AddIPv6PrefixReply, error)
	ReleaseIPv6Prefix(context.Context, *ReleaseIPv6PrefixRequest) (*GenericResponse, error)
	GetBGPStatus(context.Context, *GetBGPStatusRequest) (*GetBGPStatusReply, error)
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsReply, error)
}

func RegisterGrubenlampeServer(s *grpc.Server, srv GrubenlampeServer) {
	s.RegisterService(&_Grubenlampe_serviceDesc, srv)
}

func _Grubenlampe_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_AddOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).AddOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/AddOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).AddOrg(ctx, req.(*AddOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_AddASN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddASNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).AddASN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/AddASN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).AddASN(ctx, req.(*AddASNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_AddTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).AddTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/AddTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).AddTunnel(ctx, req.(*AddTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_DeleteTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).DeleteTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/DeleteTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).DeleteTunnel(ctx, req.(*DeleteTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_AddIPv4Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPv4AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).AddIPv4Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/AddIPv4Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).AddIPv4Address(ctx, req.(*AddIPv4AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_ReleaseIPv4Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPv4AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).ReleaseIPv4Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/ReleaseIPv4Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).ReleaseIPv4Address(ctx, req.(*ReleaseIPv4AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_AddIPv6Prefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIPv6PrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).AddIPv6Prefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/AddIPv6Prefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).AddIPv6Prefix(ctx, req.(*AddIPv6PrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_ReleaseIPv6Prefix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseIPv6PrefixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).ReleaseIPv6Prefix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/ReleaseIPv6Prefix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).ReleaseIPv6Prefix(ctx, req.(*ReleaseIPv6PrefixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_GetBGPStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBGPStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).GetBGPStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/GetBGPStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).GetBGPStatus(ctx, req.(*GetBGPStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grubenlampe_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrubenlampeServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Grubenlampe/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrubenlampeServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Grubenlampe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Grubenlampe",
	HandlerType: (*GrubenlampeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _Grubenlampe_AddUser_Handler,
		},
		{
			MethodName: "AddOrg",
			Handler:    _Grubenlampe_AddOrg_Handler,
		},
		{
			MethodName: "AddASN",
			Handler:    _Grubenlampe_AddASN_Handler,
		},
		{
			MethodName: "AddTunnel",
			Handler:    _Grubenlampe_AddTunnel_Handler,
		},
		{
			MethodName: "DeleteTunnel",
			Handler:    _Grubenlampe_DeleteTunnel_Handler,
		},
		{
			MethodName: "AddIPv4Address",
			Handler:    _Grubenlampe_AddIPv4Address_Handler,
		},
		{
			MethodName: "ReleaseIPv4Address",
			Handler:    _Grubenlampe_ReleaseIPv4Address_Handler,
		},
		{
			MethodName: "AddIPv6Prefix",
			Handler:    _Grubenlampe_AddIPv6Prefix_Handler,
		},
		{
			MethodName: "ReleaseIPv6Prefix",
			Handler:    _Grubenlampe_ReleaseIPv6Prefix_Handler,
		},
		{
			MethodName: "GetBGPStatus",
			Handler:    _Grubenlampe_GetBGPStatus_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Grubenlampe_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grubenlampe.proto",
}

func init() { proto.RegisterFile("grubenlampe.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x6f, 0x73, 0xd2, 0x40,
	0x10, 0xc6, 0x4b, 0xa1, 0x50, 0x96, 0x16, 0xcb, 0xb5, 0xc5, 0x34, 0x5a, 0xcb, 0x64, 0x9c, 0x91,
	0x17, 0x4a, 0x67, 0xda, 0xda, 0x17, 0x8e, 0x3a, 0xd2, 0xb1, 0x83, 0x7f, 0xb0, 0x76, 0x42, 0x7d,
	0x8d, 0x81, 0x6c, 0x53, 0x66, 0x42, 0x12, 0xef, 0x82, 0xda, 0x0f, 0xe4, 0x57, 0xf2, 0xf3, 0x38,
	0x77, 0xb9, 0x23, 0x10, 0x12, 0x95, 0xbe, 0xcb, 0xee, 0xdd, 0x3e, 0xf7, 0x2c, 0xb3, 0xfb, 0x03,
	0x6a, 0x0e, 0x9d, 0x0c, 0xd0, 0x73, 0xad, 0x71, 0x80, 0xad, 0x80, 0xfa, 0xa1, 0x4f, 0xf2, 0x56,
	0x30, 0xd2, 0x0f, 0x1c, 0xdf, 0x77, 0x5c, 0x3c, 0x14, 0xa9, 0xc1, 0xe4, 0xfa, 0x30, 0x1c, 0x8d,
	0x91, 0x85, 0xd6, 0x38, 0x88, 0x6e, 0x19, 0x5b, 0x50, 0xed, 0xa0, 0x87, 0x74, 0x34, 0x34, 0xf1,
	0xdb, 0x04, 0x59, 0x68, 0x9c, 0xc3, 0xbd, 0x69, 0x86, 0x05, 0xbe, 0xc7, 0x90, 0x68, 0x50, 0x62,
	0x93, 0xe1, 0x10, 0x19, 0xd3, 0x72, 0x8d, 0x5c, 0x73, 0xdd, 0x54, 0x21, 0x3f, 0x19, 0x23, 0x63,
	0x96, 0x83, 0xda, 0x6a, 0x23, 0xd7, 0x2c, 0x9b, 0x2a, 0x34, 0x86, 0x50, 0x6d, 0xdb, 0xf6, 0x17,
	0x86, 0x54, 0x0a, 0x93, 0x1d, 0x58, 0xc3, 0xb1, 0x35, 0x72, 0x85, 0x46, 0xd9, 0x8c, 0x02, 0xa2,
	0xc3, 0x7a, 0x60, 0x31, 0xf6, 0xc3, 0xa7, 0xb6, 0x94, 0x98, 0xc6, 0xe4, 0x00, 0x2a, 0x74, 0x14,
	0x60, 0xff, 0xc6, 0xf2, 0x6c, 0x17, 0xb5, 0xbc, 0x38, 0x06, 0x9e, 0x7a, 0x27, 0x32, 0xc6, 0x15,
	0x6c, 0xb6, 0x6d, 0xfb, 0x33, 0x75, 0xd4, 0x1b, 0x04, 0x0a, 0x9e, 0x35, 0x46, 0xf9, 0x84, 0xf8,
	0x26, 0xfb, 0x00, 0xec, 0xc6, 0xa7, 0x61, 0x5f, 0x9c, 0x44, 0x6f, 0x94, 0x45, 0xe6, 0x82, 0x1f,
	0x6f, 0x41, 0xde, 0x62, 0x9e, 0x10, 0xdf, 0x34, 0xf9, 0xa7, 0xd1, 0x11, 0xaa, 0xed, 0xde, 0x85,
	0x52, 0x7d, 0x0c, 0x55, 0x9f, 0x3a, 0xfd, 0x19, 0x95, 0x48, 0x7f, 0xc3, 0xa7, 0x4e, 0x2f, 0x29,
	0xb4, 0x1a, 0x0b, 0xbd, 0x86, 0xad, 0xb6, 0x6d, 0x5f, 0x4d, 0x3c, 0x0f, 0x5d, 0xa5, 0xa5, 0x41,
	0xc9, 0xb2, 0x6d, 0xaa, 0x7e, 0xcb, 0xb2, 0xa9, 0xc2, 0x94, 0xfa, 0x43, 0xd8, 0x7e, 0x8b, 0x2e,
	0x86, 0xf8, 0x9f, 0x12, 0xc6, 0x2b, 0xd8, 0x6d, 0xdb, 0xf6, 0xfb, 0xcb, 0xef, 0x27, 0xed, 0x28,
	0xb3, 0x54, 0x07, 0xc6, 0x35, 0xd4, 0x93, 0xe5, 0x77, 0x9f, 0x80, 0x59, 0x9b, 0xf9, 0x79, 0x9b,
	0xcf, 0x61, 0xcf, 0x44, 0x17, 0x2d, 0x86, 0x29, 0x56, 0xb3, 0xbb, 0x7b, 0x09, 0x3b, 0x91, 0xbd,
	0xd3, 0x4b, 0x8a, 0xd7, 0xa3, 0x9f, 0xcb, 0x35, 0xf7, 0x15, 0x48, 0xa2, 0x3a, 0x70, 0x6f, 0xef,
	0xd4, 0x58, 0x1d, 0x8a, 0x81, 0x90, 0x90, 0x7d, 0xc9, 0xc8, 0x38, 0x01, 0x2d, 0x6e, 0x2b, 0xe1,
	0x31, 0xbb, 0xab, 0x27, 0xb0, 0xdd, 0xc1, 0xf0, 0xac, 0x73, 0xd9, 0x0b, 0xad, 0x70, 0x32, 0xfd,
	0x19, 0xe4, 0x34, 0xe4, 0xe2, 0x69, 0x08, 0xa1, 0x36, 0x7f, 0xf1, 0xef, 0xfe, 0xeb, 0x50, 0x1c,
	0xe3, 0x8c, 0x7d, 0x19, 0x91, 0x67, 0x00, 0x03, 0x27, 0xe8, 0x33, 0x21, 0xa2, 0xe5, 0x1b, 0xf9,
	0x66, 0xe5, 0xa8, 0xda, 0xb2, 0x82, 0x51, 0x2b, 0x96, 0x2e, 0x0f, 0x9c, 0x20, 0xfa, 0x34, 0x3e,
	0x41, 0x79, 0x9a, 0x5f, 0x66, 0x78, 0xf9, 0xba, 0xf3, 0x37, 0x50, 0x6e, 0x56, 0x14, 0x18, 0xa7,
	0x9c, 0x37, 0x61, 0xd7, 0x77, 0x96, 0x1c, 0xcd, 0xa7, 0xb0, 0x31, 0xad, 0xe3, 0x7d, 0x3f, 0x84,
	0x82, 0xeb, 0x3b, 0xdc, 0x06, 0xf7, 0xbf, 0x2e, 0xfc, 0x77, 0x7d, 0xc7, 0x14, 0x59, 0xe3, 0x57,
	0x0e, 0xf2, 0x5d, 0xdf, 0xe1, 0x38, 0x98, 0x30, 0xa4, 0x0a, 0x07, 0xfc, 0x3b, 0xe5, 0xbd, 0xd5,
	0x94, 0x65, 0xd6, 0xa0, 0x44, 0x23, 0x83, 0x6a, 0x78, 0x65, 0xc8, 0x81, 0x45, 0xe5, 0x5a, 0x68,
	0x85, 0x08, 0x58, 0x2a, 0x26, 0x2d, 0x28, 0x70, 0xc0, 0x6a, 0x6b, 0x8d, 0x5c, 0xb3, 0x72, 0xa4,
	0xb7, 0x22, 0xfa, 0xb6, 0x14, 0x7d, 0x5b, 0x57, 0x8a, 0xbe, 0xa6, 0xb8, 0x77, 0xf4, 0x7b, 0x0d,
	0x2a, 0x9d, 0x98, 0xdc, 0xe4, 0x14, 0x4a, 0x12, 0x9a, 0x64, 0x5b, 0xb4, 0x34, 0x8f, 0x50, 0x7d,
	0x47, 0x24, 0x13, 0x78, 0x36, 0x56, 0xc8, 0x09, 0x14, 0x23, 0x0e, 0x12, 0xa2, 0xca, 0x62, 0x28,
	0xfe, 0xa3, 0xaa, 0xdd, 0xbb, 0x88, 0xab, 0x62, 0xe8, 0x65, 0x56, 0xbd, 0x80, 0xf2, 0x14, 0x6a,
	0x64, 0x57, 0x15, 0xce, 0x11, 0x2a, 0xb3, 0xf6, 0x0d, 0x6c, 0xcc, 0x02, 0x8d, 0x68, 0xe2, 0x5e,
	0x0a, 0xe3, 0x32, 0x15, 0x3e, 0x8a, 0xbf, 0x95, 0x19, 0x6c, 0x10, 0x5d, 0x59, 0x58, 0x64, 0x89,
	0xfe, 0x20, 0xf5, 0x6c, 0x2a, 0xd6, 0x05, 0xb2, 0xc8, 0x21, 0xf2, 0x48, 0x14, 0x65, 0x02, 0x2a,
	0xd3, 0xda, 0xb9, 0xf8, 0xdb, 0x88, 0x57, 0x9f, 0xec, 0xcd, 0xbc, 0x3e, 0x8f, 0x03, 0xfd, 0x7e,
	0xda, 0x51, 0xe0, 0xde, 0x1a, 0x2b, 0xe4, 0x03, 0xd4, 0x16, 0x28, 0x42, 0xf6, 0x13, 0x9e, 0x12,
	0x72, 0x59, 0x96, 0xce, 0xc4, 0xd6, 0xcc, 0xec, 0xaf, 0xbc, 0xb7, 0x80, 0x1b, 0xbd, 0x9e, 0x72,
	0x12, 0xf9, 0x39, 0x86, 0x92, 0xdc, 0x3c, 0x39, 0x93, 0xf3, 0xfb, 0xab, 0xd7, 0xe6, 0x93, 0xa2,
	0x68, 0x50, 0x14, 0x23, 0x7f, 0xfc, 0x27, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xe9, 0xfb, 0x2f, 0x98,
	0x08, 0x00, 0x00,
}
